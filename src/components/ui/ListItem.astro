---
/* Component UI <ListItem> */

/**
 * A reusable list item component that can be either a link or span with optional active state.
 *
 * @component
 * @example
 * <ListItem href="/dashboard" active>Dashboard</ListItem>
 *
 * @example
 * <ListItem>Simple Item</ListItem>
 *
 * @param {Object} props - Component props
 * @param {string} [props.href] - If provided, renders as `<a>`. Otherwise, uses `<span>`
 * @param {boolean} [props.active=false] - Whether the item is in an active state
 * @param {string} [props.class] - Optional custom Tailwind classes
 */

interface Props {
	/**
	 * If provided, the list item will be rendered as an anchor tag.
	 */
	href?: string;

	/**
	 * If true, applies active styling to the list item.
	 * @default false
	 */
	active?: boolean;

	/**
	 * Additional custom Tailwind classes.
	 */
	class?: string;
}

const { href, active = false, class: className } = Astro.props;

/**
 * The base classes for the list item component.
 */
const baseClasses =
	"block w-full px-4 py-2 text-left transition-colors duration-150";

/**
 * The classes for the active state of the list item component.
 */
const activeClasses = "bg-blue-100 text-blue-600";

/**
 * The classes for the interactive state of the list item component.
 */
const interactiveClasses = !active
	? "hover:bg-gray-100 focus:bg-gray-100 focus:outline-none"
	: "";

/**
 * The combined classes for the list item component.
 */
const combinedClasses = [
	baseClasses,
	active && activeClasses,
	href && interactiveClasses,
	className,
]
	.filter(Boolean)
	.join(" ");
---

<li>
	{
		href ? (
			<a href={href} class={combinedClasses}>
				<slot />
			</a>
		) : (
			<span class={combinedClasses}>
				<slot />
			</span>
		)
	}
</li>
