---
/* Component UI <Spinner> */

/**
 * A reusable spinner component for loading states.
 *
 * @component
 * @example
 * <Spinner size="m" color="blue" />
 *
 * @example
 * <Spinner size="s" color="gray" />
 *
 * @param {Object} props - Component props
 * @param {'s'|'m'|'l'} [props.size='m'] - Size of the spinner (small, medium, large)
 * @param {'lightgray'|'gray'|'blue'|'green'|'red'} [props.color='gray'] - Color theme of the spinner
 */

interface Props {
	/**
	 * The size of the spinner.
	 * @default "m"
	 */
	size?: "s" | "m" | "l";

	/**
	 * The color of the spinner.
	 * Can be one of predefined themes.
	 * @default "gray"
	 */
	color?: "lightgray" | "gray" | "blue" | "green" | "red";
}

const { size = "m", color = "gray" } = Astro.props;

/* Define color classes using border colors */
const colorClasses: Record<string, string> = {
	lightgray: "border-gray-300 border-t-transparent",
	gray: "border-gray-500 border-t-transparent",
	blue: "border-blue-500 border-t-transparent",
	green: "border-green-500 border-t-transparent",
	red: "border-red-500 border-t-transparent",
};

/* Define size classes using border width */
const sizeClasses = {
	s: "w-4 h-4 border-2",
	m: "w-6 h-6 border-3",
	l: "w-8 h-8 border-4",
};

/* Base Tailwind CSS classes applied to all spinners */
const baseClasses = "animate-spin rounded-full";

/* Combined class names based on props and defaults */
const spinnerClasses = `${baseClasses} ${sizeClasses[size]} ${colorClasses[color]}`;
---

<div class={spinnerClasses}></div>
